Subversion
[править | править вики-текст]Материал из Википедии — свободной энциклопедии
У этого термина существуют и другие значения, см. Subversion (игра).
Subversion
Subversion.png
Тип	
централизованная система управления версиями
Автор	
CollabNet
Разработчики	
Apache Software Foundation
Написана на	
Си
Операционная система	
Linux, Windows, OS X, AIX, FreeBSD, NetBSD, OpenBSD, HP-UX и Solaris
Первый выпуск	
20 октября 2000
Последняя версия	
1.8.10 (11 августа 2014)[1]
Лицензия	
лицензия Apache[2]
Сайт	
subversion.apache.org
Subversion[3] (также известная как «SVN»[4]) — свободная централизованная система управления версиями, официально выпущенная в 2004 году компанией CollabNet[en].

Цель проекта — заменить[5][6] собой распространенную на тот момент систему Concurrent Versions System (CVS), которая ныне считается устаревшей[7][8][9]. Subversion реализует все основные функции CVS и свободна от ряда недостатков последней.

Subversion используется многими сообществами разработчиков открытого программного обеспечения (в том числе сообществами, ранее использовавшими CVS). В их числе такие известные проекты, как Apache, GCC, Free Pascal, Python, Ruby, FreeBSD, AROS, Blender, Boost, Tor. Subversion также широко используется в закрытых проектах и корпоративной сфере. Хостинг Subversion, в том числе для проектов с открытым кодом, также предоставляют популярные хостинг-проекты SourceForge.net, Tigris.org, Google Code и BountySource.

В 2007 году аналитическая компания Forrester, сравнивая преимущества и недостатки различных систем, оценила Subversion как «единоличного лидера в категории Standalone Software Configuration Management (SCM) и сильного участника в категории Software Configuration and Change Management (SCCM)».[10]

По данным статистики использования пакетов Linux-дистрибутивов Debian[11] и Ubuntu[12], количество активных пользователей Subversion примерно такое же, как у Git, и превосходит аналогичный показатель для CVS, Mercurial и Bazaar (по состоянию на июнь 2011 года).

В качестве официальной документации позиционируется[13] книга издательства O’Reilly Media, выложенная в свободный доступ[14] и дописываемая авторами по мере выхода новых версий SVN. Там же публикуются её переводы на ряд языков, в том числе русский, но при том, что англоязычные версии книги сейчас описывают версии 1.6 и 1.5, на русском языке имеются лишь книги, описывающие версии до 1.4 включительно.

Содержание  [убрать] 
1 История
2 Общие сведения
2.1 Возможности
2.2 Модель работы
2.3 Типы репозиториев
2.4 Доступ к репозиторию
3 Основные концепции
3.1 Файловая система
3.1.1 Имена файлов
3.1.2 Номера ревизий
3.1.2.1 Оперативная и стержневая ревизии
3.1.3 Операции над файловой системой
3.2 Фиксация изменений
3.2.1 Рабочая копия
3.2.2 Транзакции
3.2.3 Локальные и удалённые формы команд
3.3 Структура хранилища
3.3.1 Структура проекта в хранилище
3.3.2 Ветви
3.3.3 Метки
3.4 Свойства (properties)
3.4.1 Свойства объектов файловой системы
3.4.1.1 Свойства файлов
3.4.1.2 Свойства директорий
3.4.2 Свойства ревизий
4 Использование Subversion
4.1 Рабочий цикл
4.2 Ветвление
4.2.1 Создание ветвей
4.2.2 Работа с ветвями
4.3 Слияние
4.3.1 Копирование изменений между ветвями
4.3.2 Другие применения команды svn merge
4.4 Создание хранилища
5 Subversion и CVS
5.1 Сравнение
5.2 Миграция с CVS на Subversion
5.2.1 Преобразование репозитория
5.2.2 Отличия в использовании
5.2.2.1 Различия в работе с файлами
5.2.2.2 Адресация состояния хранилища
6 Внутренняя структура
6.1 Уровни
6.2 Конфигурация клиента
7 Недостатки
7.1 Проблемы при переименовании файлов
7.2 Слабая поддержка слияния ветвей
7.3 Невозможность удаления данных из хранилища
7.4 Папка .svn в каждой папке
8 Дополнительное программное обеспечение
9 Примечания
10 Ссылки
История[править | править вики-текст]
Разработка Subversion была начата в 2000 году по инициативе и при финансовой поддержке CollabNet. Инициаторы проекта хотели создать свободную систему управления версиями, в основном похожую на CVS, но лишённую её ошибок и неудобств. В то время не существовало лучших программ этого класса со свободной лицензией, CVS была стандартом де-факто среди разработчиков свободного программного обеспечения. Выбрав её за основу, разработчики Subversion надеялись упростить разработку за счёт использования уже проверенных концепций и в то же время облегчить переход на новую систему многочисленным пользователям CVS.[15]

Основные события истории развития Subversion.

31 августа 2001 года команда разработчиков перешла с CVS на Subversion для управления собственным исходным кодом: Subversion стала «самодостаточной».
23 февраля 2004 года вышел релиз 1.0.0[16]. К этому времени Subversion уже использовалась примерно на 1400 серверах с открытым доступом.[17]
29 сентября 2004 года появился релиз 1.1.0. Среди основных нововведений — новый формат хранилища на основе обычных файлов (FSFS), в дополнение к существовавшему ранее (с использованием Berkeley DB).[18]
21 мая 2005 года вышел релиз 1.2.0, в котором добавлена возможность блокировки файлов,[19] что позволило улучшить поддержку клиентов WebDAV/DeltaV, в том числе, реализовать автоматическое создание новых версий при редактировании файлов с помощью таких клиентов. Начиная с этого релиза Subversion по умолчанию использует FSFS для новых хранилищ.
30 декабря 2005 года вышел релиз 1.3.0.[20] Основными изменениями являются возможность устанавливать права доступа к директориям при использовании svnserve, дополнительные возможности команд, а также множество улучшений для разработчиков.
10 сентября 2006 года вышел релиз 1.4.0.[21] Он поддерживает работу с BerkeleyDB 4.4 и может использовать её функции самовосстановления. Ранее при сбоях Subversion хранилище, использующее BerkeleyDB, могло остаться в «заклиненном» состоянии и требовалось вмешательство администратора для восстановления работы системы (при использовании FSFS этой проблемы нет).
19 июня 2008 года вышел релиз 1.5.0[22], в нём сделано множество улучшений, самым значительным из которых является базовая поддержка отслеживания слияний (англ. merge tracking). Эта возможность делает процесс слияния пакетов в Subversion более простым и надёжным.
20 марта 2009 года вышел релиз 1.6.0.[23] Улучшения поддержки svn:externals, обнаружение «конфликтов деревьев» (англ. tree conflict), улучшение эффективности хранения данных в репозитории и другие внесённые изменения.
В феврале 2010 года проект Subversion был официально переведён под управление Apache Software Foundation (ASF)[24]. Президент Subversion Corporation и директор Open Source в WANdisco выступил с видеообращением, в котором с энтузиазмом пообещал всем, что переход Subversion к ASF будет лишь способствовать более активному развитию проекта.[25]
11 октября 2011 года состоялся релиз 1.7[26]. Основные улучшения: теперь только одна папка .svn в корне рабочей копии; ускорена работа по HTTP; добавлена утилита svnrdump; новая команда svn patch.
18 июня 2013 года вышел релиз 1.8.0.[27] Apache Subversion 1.8 является расширением всех предыдущих выпусков Subversion.
Общие сведения[править | править вики-текст]
Возможности[править | править вики-текст]
Хранение полной истории изменений отслеживаемых объектов (файлов, каталогов, символьных ссылок[28]) в централизованном хранилище (репозитории), в том числе при изменении атрибутов («метаданных»), перемещении, переименовании и удалении
Копирование объектов с разветвлением истории — при копировании в хранилище появляются два отдельных объекта с общей историей
Поддержка переноса изменений между копиями объектов, в том числе полного слияния копий (в рабочей копии; без объединения истории)
Поддержка ветвления:
создания ветвей (копированием директорий) и работы с ними
слияние ветвей (переносом изменений)
Поддержка меток (копированием директорий)
История изменений и копии объектов (в том числе ветви и метки) хранятся в виде связанных разностных копий — «дешёвых» (не требующих больших временны?х и дисковых ресурсов) при создании и хранении
Поддержка конкурентной (в том числе одновременной, с изоляцией транзакций) многопользовательской работы с хранилищем и, в большинстве случаев, автоматическим слиянием изменений различных разработчиков (в рабочей копии)
Фиксации изменений в хранилище (в том числе многообъектные) организуются в виде атомарных транзакций
Сетевой обмен между сервером и клиентом предусматривает передачу только различий между рабочей копией и хранилищем
Обеспечивается одинаково эффективная работа как с текстовыми, так и с двоичными файлами
Различные варианты доступа к хранилищу, в том числе:
непосредственный доступ на локальной файловой системе;
по собственному сетевому протоколу;
через веб-сервер по протоколу WebDAV/DeltaV.
Вывод клиента командной строки одинаково удобен и для чтения, и для разбора программами
Возможность зеркалирования хранилища
Два возможных внутренних формата хранилища (англ. repository): база данных или набор обычных файлов
Интернационализированные сообщения программы (используются настройки локали)
Библиотеки для языков PHP, Python, Perl, Java позволяют встроить функциональность клиента Subversion в программы, написанные на этих языках
Многоуровневая архитектура библиотек, изначально рассчитанная на клиент-серверную модель
Модель работы[править | править вики-текст]
Subversion — централизованная система (в отличие от распределённых систем, таких как Git или Mercurial), то есть данные хранятся в едином хранилище. Хранилище может располагаться на локальном диске или на сетевом сервере.

Работа в Subversion мало отличается от работы в других централизованных системах управления версиями. Клиенты копируют файлы из хранилища, создавая локальные рабочие копии, затем вносят изменения в рабочие копии и фиксируют эти изменения в хранилище. Несколько клиентов могут одновременно обращаться к хранилищу. Для совместной работы над файлами в Subversion преимущественно используется модель копирование — изменение — слияние. Кроме того, для файлов, не допускающих слияние (различные бинарные форматы файлов), можно использовать модель блокирование — изменение — разблокирование.

При сохранении новых версий используется дельта-компрессия: система находит отличия новой версии от предыдущей и записывает только их, избегая дублирования данных.

При использовании доступа с помощью WebDAV также поддерживается прозрачное управление версиями — если любой клиент WebDAV открывает для записи и затем сохраняет файл, хранящийся на сетевом ресурсе, то автоматически создаётся новая версия.

Типы репозиториев[править | править вики-текст]
Subversion предлагает два варианта организации репозиториев[29]. Репозитории первого типа используют для хранения базы данных на основе Berkeley DB, репозитории второго типа — обычные файлы специального формата (доступ к данным организуется с помощью собственных библиотек, без использования сторонних баз данных). Разработчики Subversion часто называют хранилище «файловой системой», поэтому второй тип получил название FSFS, то есть (версионированная) файловая система (англ. File System) поверх (обычной) файловой системы.

Оба типа репозиториев обеспечивают достаточную надёжность при правильной организации[30] (Berkeley DB использует блокировки файлов, поэтому её нельзя использовать на некоторых сетевых файловых системах, не поддерживающих блокировок), каждая из них обладает своими преимуществами и недостатками. Считается, что FSFS легче правильно настроить, она требует меньшего внимания от администратора. Кроме того, до релиза 1.4 хранилища, использующие Berkeley DB могли при определённых условиях оказаться в так называемом заклиненном (англ. wedged) состоянии; требовалось вмешательство администратора для восстановления его работоспособности. Начиная с релиза 1.2 для новых хранилищ по умолчанию используется FSFS.

Доступ к репозиторию[править | править вики-текст]
Subversion предоставляет следующие способы доступа к репозиторию:

прямой доступ к репозиторию на диске (на локальной или сетевой файловой системе)
удалённый доступ по протоколу WebDAV/DeltaV поверх HTTP (или HTTPS) с использованием модуля mod_dav_svn для веб-сервера Apache 2
удалённый доступ с использованием собственного протокола SVN:
на выделенном сетевом соединении (по умолчанию на TCP-порту 3690)
через стандартный ввод-вывод (в том числе через средства удаленного CLI, например SSH)
Все эти способы могут быть использованы для работы с репозиториями обоих типов (FSFS и Berkeley DB). Для доступа к одному и тому же репозиторию могут одновременно использоваться разные способы.

Основные концепции[править | править вики-текст]
Файловая система[править | править вики-текст]

Рис. 1. Двумерное представление файловой системы в Subversion
С точки зрения пользователя хранилище Subversion представляет собой «двумерную» файловую систему. Объекты в хранилище (файлы и директории) идентифицируются двумя «координатами»: именем и номером ревизии. Другими словами, хранилище представляет собой массив мгновенных снимков (ревизий) дерева файлов и директорий, индексируемый номером ревизии. Каждый такой снимок — обычная (одномерная) файловая система.

При необходимости указания на конкретную ревизию объекта используется запись вида: имя@ревизия, например, /main.c@29 — файл /main.c в ревизии 29. Такое указание ревизии, используемое для уточнения имени, называется стержневая ревизия (англ. peg revision).

На рис. 1 показано графическое представление файловой системы: вертикальная ось соответствует множеству имён, горизонтальная — множеству ревизий.

Имена файлов[править | править вики-текст]
Имя объекта файловой системы в Subversion образуется по тем же правилам, что и в UNIX-подобных операционных системах: существует только одна корневая директория, элементы пути разделяются косой чертой («/»). Объектами файловой системы являются файлы и директории (а также символические ссылки, которые эмулируются из обычных файлов путём установки атрибута svn:special).

Номера ревизий[править | править вики-текст]
Номер ревизии в Subversion — это натуральное число (или 0 для самой первой ревизии), адресующее номер состояния хранилища в процессе изменения содержащихся в нём данных. Каждая успешная фиксация изменений порождает ровно одну новую ревизию в хранилище, то есть N-я ревизия — это состояние хранилища после N-й фиксации.

В Subversion ревизия характеризует состояние не отдельного файла, а всего хранилища в целом. Например, ревизия 32 (обведено пунктиром на рисунке) — это состояние четырёх файлов и двух директорий, существовавших в хранилище на тот момент.

Номер ревизии является аналогом времени в том смысле, что меньшие номера ревизий соответствуют более ранним состояниям хранилища, а бо?льшие — поздним.

Минимальный номер ревизии 0 (ноль) соответствует изначальному состоянию хранилища, когда ещё не было зафиксировано ни одной правки. В нулевой ревизии хранилище содержит только пустую корневую директорию.
Максимальный номер ревизии соответствует самому последнему состоянию хранилища, то есть состоянию после фиксации последней правки. Вместо указания номера последней ревизии можно использовать ключевое слово HEAD (головная ревизия); это удобно, поскольку номер головной ревизии увеличивается при каждой фиксации изменений.
Номер ревизии можно рассматривать как некую временну?ю отметку в истории хранилища. Более того, с каждым номером ревизии связано абсолютное значение времени, когда эта ревизия была сделана (свойство svn:date). Однако указание номера ревизии удобнее, чем указание времени, так как нет путаницы с часовыми поясами, запись номера короче и номер ревизии не может быть изменён.

Оперативная и стержневая ревизии[править | править вики-текст]

Рис. 2. Указание стержневой ревизии
Номер ревизии используется в двух различных контекстах:

оперативной ревизии (англ. operative revision);
стержневой ревизии (англ. peg revision).
Ревизия называется оперативной, если она указывается как ревизия или диапазон ревизий, к которому должна быть применена команда, например:

svn log -r 199:230 http://some.path
В данном примере выполняется команда svn log для диапазона ревизий 199:230, который и является диапазоном оперативных ревизий.

Однако указание только оперативной ревизии иногда может неоднозначно указывать на объекты хранилища. Например, в ситуации, показанной на рис. 2, возникает неоднозначность при выполнении следующей команды:

svn log -r 29:33 http://some.path/bar.txt
В команде указан диапазон оперативных ревизий (29:33), но области, выделенные на рисунке голубым и зелёным фоном, в равной степени можно считать историей файла /bar.txt в диапазоне ревизий 29:33. В подобных случаях необходимо указывать ещё и стержневую ревизию для разрешения неоднозначности. Стержневая ревизия — это номер ревизии, указанный в дополнение к URL объекта файловой системы (используется запись вида «URL@ревизия»). URL со стержневой ревизией всегда однозначно идентифицирует объект (файл или директорию). Команда применяется к той единственной цепочке состояний, которой принадлежит указанная пара URL@ревизия. В приведённом ниже примере первая команда выведет историю, выделенную на рисунке голубым фоном, а вторая — историю, выделенную зелёным фоном:

svn log -r 29:33 http://some.path/file.txt@32
svn log -r 29:33 http://some.path/bar.txt@34
В качестве стержневой ревизии следует указывать как можно более позднее состояние интересующего объекта. Причина этого в том, что цепочка состояний однозначно отслеживается «назад», но не «вперёд». Например, URL со стержневой ревизией http://some.path/foo.txt@31 принадлежит двум цепочкам состояний (выделены соответственно зелёным и серым фоном). Из этих двух цепочек указанный URL адресует серую цепочку, то есть при движении «вперёд» от стержневой ревизии операции копирования игнорируются.

Операции над файловой системой[править | править вики-текст]
Над объектами файловой системы в хранилище Subversion могут быть произведены перечисленные ниже операции[31] (см. рис. 1). В скобках указано краткое именование операции в обозначениях команды svn status.

Добавление (A). Добавление объекта в файловую систему. Добавленный объект не имеет истории ревизий. Пример на рисунке:
файл /main.c был добавлен в ревизии 27.
Модификация (M). Модификация объекта, например, изменение содержимого файла или изменение свойств файла или директории. Пример на рисунке:
файл /main.c был модифицирован в ревизии 28.
Удаление (D). Удаление файла из головной и последующих ревизий. При этом файл остаётся в предыдущих ревизиях. Пример на рисунке:
файл /main.c был удалён в ревизии 30.
Добавление с историей (A+). Представляет собой копирование объекта внутри файловой системы хранилища, то есть объект имя_источника@ревизия_источника копируется в имя_копии@HEAD. Скопированный объект наследует от источника историю ревизий до момента копирования (наследование истории показано на рисунке пунктирными связями). Примеры на рисунке:
в ревизии 29 директория /tags/R1 была скопирована с директории /trunk@27;
в ревизии 31 файл /main.c был скопирован с /main.c@29, то есть с более ранней ревизии самого себя, таким образом, произведено восстановление ранее удалённого (в ревизии 30) файла с сохранением истории ревизий.
Замена (R+). Имеет место в случае, когда в одной ревизии произведено и удаление объекта (D), и добавление с историей (A+) объекта с тем же самым именем. Хотя имя при операции замены остаётся неизменным, Subversion рассматривает объект до и после замены как два различных объекта с различными историями ревизий (история старого заканчивается в точке замены, история нового наследуется от источника копирования и продолжается далее). Пример на рисунке:
в ревизии 30 файл /file.txt был заменён: старый файл /file.txt удалён, а новый файл с тем же именем скопирован с файла /bar.txt@29.
Фиксация изменений[править | править вики-текст]
Рабочая копия[править | править вики-текст]
Рабочая копия — это созданная клиентской программой Subversion локальная копия части данных из хранилища, содержащая помимо собственно данных некоторую служебную информацию (скрытые директории с именем .svn). Служебная информация необходима для правильного функционирования рабочей копии; что-либо менять в служебных данных нельзя. Минимальной единицей данных, которую можно получить из хранилища как рабочую копию, является директория (можно также извлечь директорию без поддиректорий, а потом докачивать их по мере необходимости). Другими словами, в Subversion рабочая копия всегда соответствует ровно одной директории хранилища. Извлечь из хранилища отдельный файл как рабочую копию невозможно.

Любая поддиректория рабочей копии Subversion 1.6 и более ранних версий также является полноценной рабочей копией, поскольку в каждой директории хранятся её служебные данные (каталоги .svn). Начиная с версии 1.7 в каждой рабочей копии присутствует только одна директория .svn в корне её каталога.

Рабочая копия является самодостаточной в том смысле, что Subversion не хранит каких-либо данных, относящихся к рабочей копии, вне её. Поэтому, имея одну рабочую копию, можно сделать ещё несколько копий простым копированием без затрат сетевого трафика.

В служебных директориях рабочей копии, помимо прочего, хранится так называемая чистая копия (англ. pristine copy) — файлы рабочей копии в неизменённом виде, как они были извлечены из хранилища (для svn это ревизия с именем BASE). Наличие чистой копии позволяет быстро и без обращения к хранилищу выполнять операции просмотра и отката локальных изменений. Однако размер рабочей копии на диске примерно в два раза больше (данные + чистая копия данных), чем размер самих данных. Такой подход обусловлен тем, что дисковые ресурсы дешевле и доступнее, чем ресурсы сети передачи данных.

Как правило, создание рабочей копии является первым и необходимым этапом для фиксации локальных изменений, поскольку зафиксировать в хранилище можно только изменения, сделанные в рабочей копии. Исключением являются операции, которые могут быть выполнены прямо в хранилище без создания рабочей копии.

Транзакции[править | править вики-текст]
Работа с хранилищем в Subversion организована в форме транзакций со свойствами атомарности и изоляции из набора свойств ACID. Таким образом система управления версиями гарантирует целостность, непротиворечивость и доступность хранилища в любой момент времени.

Атомарность фиксаций (англ. atomic commits) — изменения в нескольких файлах или директориях фиксируются единой транзакцией порождая при этом одну ревизию. В случае неудачной фиксации, при любом сбое или ошибке, система гарантирует, что хранилище не окажется в частично изменённом состоянии — в хранилище попадут либо все изменения, либо (при неудаче) — ни одного.
Изоляция гарантирует, что промежуточные состояния хранилища внутри транзакции не видны другим транзакциям и пользователям. Например, если один пользователь фиксирует одной транзакцией изменения в нескольких файлах, то другие пользователи не могут увидеть такого состояния хранилища, в котором часть файлов уже изменена, а часть — не изменена.
Данные свойства не гарантируются для рабочей копии Subversion — она, в отличие от хранилища, при сбое или прерывании может оказаться в промежуточном или заблокированном состоянии (то есть перед продолжением работы её потребуется восстановить командой svn cleanup или пересоздать заново).

Локальные и удалённые формы команд[править | править вики-текст]
Все команды клиента Subversion можно разделить на следующие группы:

модифицирующие рабочую копию;
модифицирующие хранилище;
модифицирующие и рабочую копию, и хранилище;
не модифицирующие ничего.
Структура хранилища[править | править вики-текст]
Структура проекта в хранилище[править | править вики-текст]
Формально Subversion не накладывает каких-либо ограничений на файловую структуру проекта — она может быть какой угодно в рамках правил именования объектов файловой системы. Тем не менее, существуют рекомендации, призванные облегчить работу с ветвями и метками. В простейшем случае в корневой директории хранилища рекомендуется создать как минимум три поддиректории:

/.
trunk
branches
tags
где вся файловая структура проекта (основной линии разработки) должна содержаться в поддиректории trunk, поддиректория branches должна содержать ветви проекта, а tags — метки. Например, следующая структура директорий хранилища:

/.
trunk
branches
branch_1
tags
tag_1
tag_2
предполагает наличие у проекта (trunk) одной ветви «branch_1» и двух меток «tag_1» и «tag_2». Каждая из этих директорий (trunk, branch_1, tag_1 и tag_2) содержит копию соответствующей версии проекта.

Если (под)проектов в хранилище несколько, то такая структура поддиректорий создается для каждого (под)проекта:

/.
project1
trunk
branches
tags
project2
trunk
branches
tags
то есть в корневой директории находятся директории проектов, и в каждом из них есть свои trunk, branches, tags, относящиеся только к этому проекту. Описанные структуры директорий хранилища являются лишь примерами, на практике хранилище можно организовать таким способом, который оптимально подходит в данном конкретном случае.[32][33]

Другим способом хранения нескольких проектов является создание нескольких хранилищ. В разных хранилищах следует располагать проекты, которые никак не связаны между собой, поскольку между хранилищами нельзя будет выполнить операции копирования, перемещения и слияния. Несколько хранилищ можно при необходимости объединить в одно с сохранением истории ревизий (путём импорта командой svnadmin load с параметром --parent-dir).

Ветви[править | править вики-текст]
Основная статья: Ветвь (управление версиями)
Subversion использует «файловую» модель (такую же, как и в Perforce[34]) для реализации ветвей и меток, то есть ветвь является обычной директорией (можно также сделать ветвь из одного файла, а не директории). Новая ветвь создаётся командой svn copy. Ветвь может быть создана в любой директории хранилища, однако имеет смысл придерживаться описанных выше соглашений о том, где создавать новые ветви. Более подробная информация о ветвях приведена в разделах Ветвление и Слияние.

Метки[править | править вики-текст]
Создание метки также производится командой svn copy, то есть технически не отличается от создания ветви. Отличие только в способе использования: предполагается, что никто не будет изменять данные в метке (фиксировать в неё изменения). Например, на рис. 1 метка создана в ревизии 29: директория /trunk из ревизии 27 скопирована под именем /tags/R1. Теперь, если не изменять данные в директории /tags/R1, то она навсегда останется точной копией директории /trunk@27, то есть будет меткой.

Концепция меток, используемая в Subversion, отличается от концепции меток в других системах управления версиями. Обычно метка является символическим именем, которое адресует набор файлов и их состояние. В Subversion метка копирует набор файлов и их состояние. Метки-копии в Subversion имеют свои достоинства и недостатки.

Достоинства:

метка видна в структуре директорий, можно сделать удобную древовидную организацию меток.
Недостатки:

трудно узнать, в какие метки вошёл файл (то же для директории);
если права доступа установлены индивидуально[35] для директорий, то метка эти права не наследует;
содержимое метки может быть изменено;
если из метки создать рабочую копию и зафиксировать из этой рабочей копии какие-либо изменения, то это изменит саму метку, а не те данные, которые были помечены. Правильным способом работы «от метки» является создание рабочей копии не из метки, а из того, что является источником этой метки.
Свойства (properties)[править | править вики-текст]
Одной из важных возможностей Subversion является поддержка свойств, то есть текстовых пар имя = значение, которые могут быть установлены для объектов в хранилище. Свойства используются в двух различных контекстах: для объектов файловой системы и для ревизий.

Свойства объектов файловой системы[править | править вики-текст]
Каждому файлу или директории в хранилище может быть присвоен набор свойств. Изменения свойств сохраняются в истории так же, как и изменения в файловой системе. Пользователи могут устанавливать свойства с любыми именами; существует также предопределённый набор служебных свойств, которые используются клиентской программой Subversion (имена служебных свойств имеют префикс "svn:").

Свойства файлов[править | править вики-текст]
svn:executable 
Делает файл исполняемым (для рабочих копий под операционными системами семейства UNIX).
svn:mime-type 
Хранит MIME-тип файла. Влияет на способ работы команд, показывающих разницу файлов, а также объединяющих изменения (merging).
svn:keywords 
Список ключевых слов (англ. keywords), которые будут заменены в файле соответствующими значениями. Чтобы замена произошла, ключевое слово должно присутствовать в файле в виде $keyword$. Используется для того, чтобы автоматически обновлять в файле значения, меняющиеся от версии к версии (например, номер ревизии).
svn:eol-style 
Определяет правило преобразования символов конца строки (англ. end-of-line, EOL) в текстовом файле. Используется в случаях, когда файл должен иметь конкретный тип символов EOL. Обычно используется «native» — при этом тип символов конца строки соответствует принятому в той операционной системе, в которой происходит создание рабочей копии.
svn:needs-lock 
Означает, что при извлечении из хранилища файл будет доступен только для чтения. Это свойство предназначено для использования совместно с механизмом блокировки. Запрет записи в файл является напоминанием того, что надо получить блокировку на этот файл, прежде чем его редактировать: при получении блокировки клиентская программа Subversion автоматически делает файл доступным для записи (снятие блокировки снова делает файл защищённым от модификаций). Блокировки могут быть использованы и без установки этого свойства. Однако делать это не рекомендуется, так как существует риск того, что другой пользователь может начать редактировать заблокированный файл, и это обнаружится только при фиксации изменений.
svn:special 
Свойство не предназначено для установки или модификации пользователями. В настоящее время используется для хранения символьных ссылок в репозитории. Когда символьная ссылка добавляется в репозиторий, в репозитории создаётся файл с установленным свойством svn:special. Когда этот файл извлекается в UNIX-подобной системе, клиентская программа Subversion преобразует его обратно в ссылку.
svn:mergeinfo 
Хранит информацию о том, из каких путей было произведено слияние в этот файл. Свойство введено в версии 1.5, оно используется для отслеживания слияний (англ. merge tracking). Представляет собой набор строк вида имя_файла: диапазон_ревизий. Здесь имя_файла — полное (с путём от корня файловой системы репозитория) имя файла или директории, откуда было произведено слияние указанного диапазона ревизий. Строки модифицируются автоматически при операциях слияния; при последующих слияниях Subversion учитывает ранее вписанные строки, избегая тем самым повторных слияний одних и тех же изменений. Не рекомендуется изменять свойство svn:mergeinfo вручную — это может нарушить механизм отслеживания слияний.
Свойства директорий[править | править вики-текст]
svn:ignore 
Список шаблонов имён файлов и директорий, которые клиентская программа Subversion будет игнорировать в данной директории. Это свойство аналогично файлу .cvsignore в CVS. Как правило, свойство настраивается таким образом, чтобы клиентская программа «не видела» файлы и директории, которые автоматически создаются различными программами и не должны быть версионированы (например, объектные файлы, временные файлы и т. п.). Действие этого свойства не распространяется на поддиректории.
svn:externals 
Позволяет автоматически извлечь в рабочую копию набор директорий, указав их URL (можно даже из другого хранилища).
svn:mergeinfo 
То же, что и для файлов.
Свойства ревизий[править | править вики-текст]
Второй тип объектов, для которых существуют свойства, — это сами ревизии. В этом случае имена свойств также могут быть любыми; некоторые свойства с префиксом "svn: " имеют специальное значение. Отличие свойств ревизий от свойств объектов файловой системы в том, что для первых понятие истории версий не применимо (поскольку конкретное значение свойства приписано одной ревизии). Другими словами, свойства ревизий можно изменить, но старое значение при этом теряется. По умолчанию изменение свойств ревизий запрещено; для разрешения администратор должен создать скрипт (англ. hook) обработки события pre-revprop-change.

svn:date 
Дата и время создания ревизии.
svn:author 
Имя пользователя, который зафиксировал изменения, вошедшие в эту ревизию.
svn:log 
Описание изменений, зафиксированных в этой ревизии (текст, введённый пользователем при фиксации изменений).
Как правило, свойства ревизий изменяются только администратором хранилища в целях исправления некорректных данных. Например, если пользователь забыл указать текстовое описание при фиксации своих изменений, то администратор может создать это описание путём редактирования свойства svn:log.

Использование Subversion[править | править вики-текст]
Рабочий цикл[править | править вики-текст]
Типичная итерация рабочего цикла с Subversion включает следующие этапы.

Обновление рабочей копии из хранилища (svn update) или её создание (svn checkout).
Изменение рабочей копии. Изменения директорий и информации о файлах производится средствами Subversion, в изменении же (содержимого) файлов Subversion никак не задействован — изменения производятся программами, предназначенными для этого (текстовые редакторы, средства разработки и т. п.):
новые (еще не зафиксированные в хранилище) файлы и директории нужно добавить (команда svn add), то есть передать под управление версиями;
если файл или директорию в рабочей копии нужно удалить, переименовать, переместить или скопировать, необходимо использовать средства Subversion (svn mkdir, svn delete, svn move, svn copy);
просмотр состояния рабочей копии и локальных (ещё не зафиксированных) изменений (svn info, svn status, svn diff);
любые локальные изменения, если они признаны неудачными, можно откатить (svn revert).
При необходимости — дополнительное обновление, для получения изменений, зафиксированных в хранилище другими пользователями и слияния этих изменений со своими (svn update).
Фиксация своих изменений (и/или результатов слияния) в хранилище (svn commit).
Ветвление[править | править вики-текст]
Ветвление является важным аспектом работы систем управления версиями, поскольку типичные приёмы[36] управления версиями (по крайней мере, при разработке программного обеспечения) включают в себя использование ветвей. Subversion обладает достаточно развитыми возможностями для ветвления и слияния (однако не поддерживает слияние переименованных файлов и директорий).


Рис. 3. Пример эволюции ветвей в Subversion
На рис. 3 условно показан пример эволюции ветвей в хранилище. Зелёным цветом показана основная линия разработки проекта (англ. mainline, trunk), жёлтым — ветви, синим — метки, пурпурным — ветвь, разработка которой прекращена. Красными стрелками показаны слияния изменений.

Создание ветвей[править | править вики-текст]
Новая ветвь (а также метка) создаётся командой svn copy, которая создаёт в хранилище копию с наследованием истории ревизий источника (операция A+). Для создания ветвей всегда следует использовать «удалённую» форму команды svn copy, например:

svn copy http://.../trunk/dir http://.../branches/branch_name -m "Creating a branch of dir"
Полученная копия будет ветвью (или меткой, в зависимости от способа работы с ней). В дальнейшем изменения, сделанные на ветви, могут быть внесены в источник, из которого была создана эта ветвь, такое распространение изменений называется слияние (англ. merge).

Операции копирования в Subversion дешёвые (англ. cheap copy), то есть требуют небольшого фиксированного количества времени и дискового пространства. Хранилище спроектировано таким образом[37], что при любом копировании происходит не дублирование данных, а создание ссылки на источник (аналогично жёсткой ссылке), однако этот механизм чисто внутренний — с точки зрения пользователя происходит именно создание копии. Благодаря высокой эффективности создания ветвей их можно создавать настолько часто, насколько это необходимо (однако слияние — необходимое дополнение к ветвлению — выполняется в Subversion медленнее, чем в других современных системах управления версиями).

Работа с ветвями[править | править вики-текст]
В целом работа на ветви не отличается от работы на основной линии разработки (trunk). Специфичные команды требуются только для действий, в которых задействовано более одной ветви. К таким командам относятся (помимо команды создания ветви svn copy):

svn switch — переключение рабочей копии на другую ветвь — используется для того, чтобы переключить имеющуюся рабочую копию на другую ветвь. В результате переключения служебные данные рабочей копии изменяются так, как будто эта рабочая копия получена операцией svn checkout из той ветви, на которую она переключена. При этом объём сетевого трафика меньше, чем при svn checkout, так как передается только разница между данными в рабочей копии и целевой ветвью;
svn merge — копирование набора изменений между ветвями — используется для слияния.
Как правило, полный цикл работы с ветвями включает следующие этапы:

создание ветви (svn copy);
переключение имеющейся рабочей копии на ветвь (svn switch) или создание новой рабочей копии путём закачки (svn checkout);
изменение файлов и директорий в рабочей копии, фиксация этих изменений (svn commit);
копирование в ветвь свежих изменений из родительской ветви, сделанных после ветвления (svn merge, svn commit);
копирование изменений из ветви в родительскую ветвь (svn merge, svn commit);
удаление ветви (svn delete), если её жизненный цикл закончен.
Слияние[править | править вики-текст]
Копирование изменений между ветвями[править | править вики-текст]
Слияние в Subversion — это применение к ветви набора изменений, сделанных на другой (или той же самой) ветви. Для осуществления слияния необходимо использовать команду svn merge — она применяет набор изменений к рабочей копии; затем нужно зафиксировать внесённые изменения (svn commit).

Терминология, связанная со слиянием, несколько запутана. Термин слияние (англ. merge) является не совсем точным, поскольку как такового объединения ветвей не происходит. Кроме того, не следует отождествлять слияние и команду svn merge: во-первых, для слияния нужно выполнить (помимо svn merge) разрешение конфликтов и фиксацию, во-вторых, применение svn merge не ограничивается слиянием.

Другие применения команды svn merge[править | править вики-текст]
Команду svn merge можно использовать не только для слияния. Фактически команда производит внесение в рабочую копию изменений, равных разнице между двумя директориями или файлами в хранилище, поэтому svn merge является универсальным средством для переноса изменений. Можно привести такие примеры использования команды svn merge:

откат уже зафиксированных изменений, в том числе целого диапазона ревизий;
удобный просмотр (в виде изменений в рабочей копии) разницы между двумя состояниями репозитория.
Создание хранилища[править | править вики-текст]
Для создания хранилища используется команда svnadmin create. Эта операция создаст пустое хранилище в указанной директории.